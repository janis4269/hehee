/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Server as PrismaServer } from "@prisma/client";

export class ServerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ServerCountArgs, "select">): Promise<number> {
    return this.prisma.server.count(args);
  }

  async servers<T extends Prisma.ServerFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ServerFindManyArgs>
  ): Promise<PrismaServer[]> {
    return this.prisma.server.findMany<Prisma.ServerFindManyArgs>(args);
  }
  async server<T extends Prisma.ServerFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ServerFindUniqueArgs>
  ): Promise<PrismaServer | null> {
    return this.prisma.server.findUnique(args);
  }
  async createServer<T extends Prisma.ServerCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ServerCreateArgs>
  ): Promise<PrismaServer> {
    return this.prisma.server.create<T>(args);
  }
  async updateServer<T extends Prisma.ServerUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ServerUpdateArgs>
  ): Promise<PrismaServer> {
    return this.prisma.server.update<T>(args);
  }
  async deleteServer<T extends Prisma.ServerDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ServerDeleteArgs>
  ): Promise<PrismaServer> {
    return this.prisma.server.delete(args);
  }
}
