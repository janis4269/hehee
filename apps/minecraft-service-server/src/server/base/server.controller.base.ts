/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ServerService } from "../server.service";
import { ServerCreateInput } from "./ServerCreateInput";
import { Server } from "./Server";
import { ServerFindManyArgs } from "./ServerFindManyArgs";
import { ServerWhereUniqueInput } from "./ServerWhereUniqueInput";
import { ServerUpdateInput } from "./ServerUpdateInput";

export class ServerControllerBase {
  constructor(protected readonly service: ServerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Server })
  async createServer(@common.Body() data: ServerCreateInput): Promise<Server> {
    return await this.service.createServer({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Server] })
  @ApiNestedQuery(ServerFindManyArgs)
  async servers(@common.Req() request: Request): Promise<Server[]> {
    const args = plainToClass(ServerFindManyArgs, request.query);
    return this.service.servers({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Server })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async server(
    @common.Param() params: ServerWhereUniqueInput
  ): Promise<Server | null> {
    const result = await this.service.server({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Server })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateServer(
    @common.Param() params: ServerWhereUniqueInput,
    @common.Body() data: ServerUpdateInput
  ): Promise<Server | null> {
    try {
      return await this.service.updateServer({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Server })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteServer(
    @common.Param() params: ServerWhereUniqueInput
  ): Promise<Server | null> {
    try {
      return await this.service.deleteServer({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
